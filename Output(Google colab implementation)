{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOsOmEzKBWGezhSVt4OIvVD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kamal-0713/handwritten-digit-recognition/blob/main/Output(Google%20colab%20implementation)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "CLZrF4hcPEne"
      },
      "outputs": [],
      "source": [
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Flatten\n",
        "from tensorflow.keras.utils import to_categorical"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train_data = pd.read_csv('/content/Train.csv')\n",
        "print(\"Shape of train_data:\", train_data.shape)\n",
        "X = train_data.iloc[:, 1:]\n",
        "y = train_data.iloc[:, 0]\n",
        "\n",
        "print(\"Shape of X after separating features:\", X.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "56qy5WdSWDUh",
        "outputId": "f318d898-b43e-4ade-dc1c-b3f3ff752c81"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of train_data: (42000, 785)\n",
            "Shape of X after separating features: (42000, 784)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if not isinstance(X, pd.DataFrame):\n",
        "    X = pd.DataFrame(X)\n",
        "X = X.apply(pd.to_numeric, errors='coerce')\n",
        "X = X.fillna(0)\n",
        "X = X.values / 255.0\n",
        "X = X.reshape(-1, 28, 28, 1)\n",
        "print(\"Shape of X after reshaping:\", X.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iVoYcJL_YM8N",
        "outputId": "e7c8a88e-3c72-4188-f843-01adafcdd95a"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of X after reshaping: (42000, 28, 28, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y = to_categorical(y, num_classes=10)\n",
        "print(\"Shape of y after one-hot encoding:\", y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ikOL-gKZYady",
        "outputId": "2052b58d-2a63-4476-c6f2-fd851ce7b3a5"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of y after one-hot encoding: (42000, 10)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "print(\"X_train shape:\", X_train.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kBvwakQpYgXa",
        "outputId": "77fc5c88-804a-4aa1-9a86-aaf50c5e48dc"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape: (33600, 28, 28, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential([\n",
        "    Flatten(input_shape=(28, 28, 1)),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "P7yReSTvYolM",
        "outputId": "b740a60c-a6f1-4f70-bc44-412bd9737096"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/reshaping/flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m784\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m100,480\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │           \u001b[38;5;34m650\u001b[0m │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">784</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">100,480</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">650</span> │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m109,386\u001b[0m (427.29 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">109,386</span> (427.29 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m109,386\u001b[0m (427.29 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">109,386</span> (427.29 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SRV72H0FYzUX",
        "outputId": "8c4a4e1e-2cae-43c8-910e-fa1122920f46"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.8412 - loss: 0.5485 - val_accuracy: 0.9504 - val_loss: 0.1684\n",
            "Epoch 2/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9619 - loss: 0.1261 - val_accuracy: 0.9560 - val_loss: 0.1363\n",
            "Epoch 3/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.9743 - loss: 0.0834 - val_accuracy: 0.9686 - val_loss: 0.1077\n",
            "Epoch 4/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9818 - loss: 0.0594 - val_accuracy: 0.9692 - val_loss: 0.1025\n",
            "Epoch 5/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9855 - loss: 0.0462 - val_accuracy: 0.9705 - val_loss: 0.0982\n",
            "Epoch 6/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9901 - loss: 0.0318 - val_accuracy: 0.9718 - val_loss: 0.1017\n",
            "Epoch 7/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9909 - loss: 0.0271 - val_accuracy: 0.9735 - val_loss: 0.1032\n",
            "Epoch 8/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.9932 - loss: 0.0219 - val_accuracy: 0.9735 - val_loss: 0.1031\n",
            "Epoch 9/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9925 - loss: 0.0196 - val_accuracy: 0.9726 - val_loss: 0.1158\n",
            "Epoch 10/10\n",
            "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9961 - loss: 0.0132 - val_accuracy: 0.9735 - val_loss: 0.1173\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "val_loss, val_accuracy = model.evaluate(X_val, y_val)\n",
        "print(f\"Validation Accuracy: {val_accuracy * 100:.2f}%\")\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "HMVwO7dRZ-wo",
        "outputId": "178b9bb2-1720-4422-ad96-8f7fdecad012"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9739 - loss: 0.1290\n",
            "Validation Accuracy: 97.35%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Default title text\n",
        "test_data = pd.read_csv('/content/Train.csv')\n",
        "X_test = test_data.iloc[:, 1:].values  # Select feature columns (pixels)\n",
        "X_test = X_test / 255.0  # Normalize pixel values before reshaping\n",
        "X_test = X_test.reshape(-1, 28, 28, 1)  # Reshape for the model\n",
        "predictions = model.predict(X_test)\n",
        "predicted_labels = np.argmax(predictions, axis=1)\n",
        "for i in range(5):\n",
        "    plt.imshow(X_test[i].reshape(28, 28), cmap='gray')\n",
        "    plt.title(f\"Predicted: {predicted_labels[i]}\")\n",
        "    plt.axis('off')\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "olIQo9ThaHDp",
        "outputId": "6e82fb63-90dd-4c5c-9d5e-98a86495d58a"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1313/1313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAADm1JREFUeJzt3G+o3nX9x/H3Nc/W5rambGdzqJwt0W5oWi6E0PyTU+lkVhShicyBMKP8c6Mkyn/VRISIiQ6hbqQNS5QoTVbmgUmZ9Ida0ExBxtRCyEkmUunczud3Q/bC4zY93+t3zs7x+HjAbuyc7/tc7w12Pfe5znW+vdZaKwCoqllTvQAA04coABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgwY6xYsaIuvfTS/P6RRx6pXq9XjzzyyJTt9GZv3hGmG1FgQtx5553V6/Xya+7cuXXcccfVl7/85frnP/851et1snnz5rrxxhuneo39uummm+qCCy6oZcuWVa/Xm7Z78s41MNULMLN861vfqpUrV9Yrr7xSjz76aN1xxx21efPm2rZtWx166KEHdZfTTz+9/ve//9WcOXM6zW3evLk2btw4LZ9wr7322jriiCPqQx/6UD300ENTvQ4zkCgwoT7+8Y/Xhz/84aqquuyyy2rx4sX13e9+t+6///666KKL9jvzn//8p+bPnz/hu8yaNavmzp074V93Ku3YsaNWrFhRL7zwQg0ODk71OsxAXj5iUn3sYx+rqtefzKqqLr300lqwYEFt3769hoeHa+HChXXxxRdXVdXo6Ght2LChjj/++Jo7d24tW7as1q1bVy+++OKYr9laq/Xr19dRRx1Vhx56aJ111ln1+OOP7/PYB/qewu9///saHh6uww8/vObPn18nnnhi3Xrrrdlv48aNVVVjXg7ba6J3rKravn17bd++fVx/nytWrBjXddAvJwUm1d4nu8WLF+dju3fvrvPOO69OO+20+s53vpOXldatW1d33nlnrV27tq688srasWNH3X777bV169b67W9/W7Nnz66qquuvv77Wr19fw8PDNTw8XH/+85/r3HPPrV27dr3tPg8//HCdf/75tXz58rrqqqvqiCOOqCeeeKIefPDBuuqqq2rdunX13HPP1cMPP1ybNm3aZ34ydjz77LOrqurpp5/u9pcLk6HBBPjBD37QqqqNjIy0nTt3tr///e/tnnvuaYsXL27z5s1r//jHP1prra1Zs6ZVVfva1742Zv43v/lNq6p29913j/n4L3/5yzEff/7559ucOXPaJz7xiTY6Oprrvv71r7eqamvWrMnHtmzZ0qqqbdmypbXW2u7du9vKlSvb0NBQe/HFF8c8zhu/1pe+9KW2v38ak7Fja60NDQ21oaGhfR7vrezcubNVVbvhhhs6zcHb8fIRE2r16tU1ODhYRx99dF144YW1YMGC+ulPf1pHHnnkmOu++MUvjvn9fffdV4sWLapzzjmnXnjhhfxatWpVLViwoLZs2VJVVSMjI7Vr16664oorxrysc/XVV7/tblu3bq0dO3bU1VdfXYcddtiYz73xax3IZO349NNPOyUwbXj5iAm1cePGOu6442pgYKCWLVtW73//+2vWrLH/9xgYGKijjjpqzMeeeuqpeumll2rp0qX7/brPP/98VVU988wzVVV17LHHjvn84OBgHX744W+5296Xsk444YTx/4EO8o4w1USBCXXKKafk3UcH8p73vGefUIyOjtbSpUvr7rvv3u/MdHinzTthR/j/EgWmhWOOOaZGRkbq1FNPrXnz5h3wuqGhoap6/X/t73vf+/LxnTt37vMOoP09RlXVtm3bavXq1Qe87kAvJR2MHWGq+Z4C08LnP//52rNnT33729/e53O7d++uf//731X1+vcsZs+eXbfddlu11nLNhg0b3vYxTj755Fq5cmVt2LAhX2+vN36tvT8z8eZrJmvHLm9JhcnmpMC0cMYZZ9S6devq5ptvrr/85S917rnn1uzZs+upp56q++67r2699db63Oc+V4ODg/WVr3ylbr755jr//PNreHi4tm7dWr/4xS9qyZIlb/kYs2bNqjvuuKM++clP1gc/+MFau3ZtLV++vJ588sl6/PHH8xPCq1atqqqqK6+8ss4777w65JBD6sILL5y0Hbu8JXXTpk31zDPP1H//+9+qqvr1r39d69evr6qqSy65JKcU6NsUv/uJGWLvW1L/+Mc/vuV1a9asafPnzz/g57/3ve+1VatWtXnz5rWFCxe2D3zgA+2aa65pzz33XK7Zs2dP++Y3v9mWL1/e5s2b184888y2bdu2NjQ09JZvSd3r0Ucfbeecc05buHBhmz9/fjvxxBPbbbfdls/v3r27XXHFFW1wcLD1er193p46kTu21u0tqWec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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAEQ1JREFUeJzt3H+M1gUdwPHPgwce3J2idNgl7jpbVpLEQnErlv1A0IPmluGuWEO32k1RoM2y1dayXFZqwyFCv5ZMWT8uVyy7NGjnJtUo1/UHzsoxcChOqPFjMkxOvv3h+MwT5O77eM/dcfd6bfzB8zyf5/vhdtz7vs89960URVEEAETEhJFeAIDRQxQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQYM975znfG9ddfn39//PHHo1KpxOOPPz5iO73RG3eE0UYUGBIPPPBAVCqV/FNfXx8XXXRR3HzzzfHiiy+O9HqldHd3xze+8Y2RXuOkjh07Ft/73veira0t6uvrY9asWfGzn/1spNdiDKkb6QUYW775zW9GW1tbvPzyy7F169ZYt25ddHd3x/bt22PKlCnDustHPvKROHLkSEyaNKnUXHd3d6xdu3ZUhuFrX/tafOc734kvfOELcdlll8WmTZvis5/9bFQqlejo6Bjp9RgDRIEhdfXVV8ell14aERGf//znY9q0afH9738/Nm3aFJ/5zGdOOnP48OFoaGgY8l0mTJgQ9fX1Q/68I+X555+Pe+65J5YvXx733XdfRLz2Mb7iiiviS1/6UixZsiTOOOOMEd6S052Xj6ipj3/84xERsXPnzoiIuP7666OxsTF27NgR7e3t0dTUFEuXLo2I114aWb16dcycOTPq6+vjvPPOi87Ozti/f3+/5yyKIu64446YMWNGTJkyJT72sY/FU089dcKx3+xnCtu2bYv29vY455xzoqGhIWbNmhX33ntv7rd27dqIiH4vhx031DtGROzYsSN27Ngx4Mdy06ZNcfTo0bjpppvytkqlEjfeeGM899xz8Ze//GXA54CBOFOgpo5/sZs2bVre1tfXFwsXLox58+bF3XffnS8rdXZ2xgMPPBA33HBDrFixInbu3Bn33Xdf9Pb2xp/+9KeYOHFiRER8/etfjzvuuCPa29ujvb09/v73v8eCBQvilVdeGXCfzZs3x+LFi6OlpSVWrlwZb3/72+Ppp5+ORx55JFauXBmdnZ2xZ8+e2Lx5czz44IMnzNdix0984hMREbFr165T7t7b2xsNDQ3xvve9r9/tc+fOzfvnzZs34McATqmAIfDTn/60iIhiy5Ytxb59+4rdu3cXP//5z4tp06YVkydPLp577rmiKIpi2bJlRUQUX/nKV/rNP/HEE0VEFBs3bux3+6OPPtrv9r179xaTJk0qFi1aVBw7diwf99WvfrWIiGLZsmV5W09PTxERRU9PT1EURdHX11e0tbUVra2txf79+/sd5/XPtXz58uJk/zVqsWNRFEVra2vR2tp6wvHeaNGiRcWFF154wu2HDx8+6ccUquHlI4bU/Pnzo7m5OS644ILo6OiIxsbG+PWvfx3nn39+v8fdeOON/f7e1dUVZ599dlx55ZXxn//8J//MmTMnGhsbo6enJyIitmzZEq+88krccsst/V7WWbVq1YC79fb2xs6dO2PVqlUxderUfve9/rneTK123LVr14BnCRERR44ciTPPPPOE24//3OTIkSMDPgcMxMtHDKm1a9fGRRddFHV1dXHeeefFe97znpgwof/3HnV1dTFjxox+tz3zzDNx8ODBmD59+kmfd+/evRER8eyzz0ZExLvf/e5+9zc3N8c555xzyt2Ov5T1/ve/f/D/oGHe8VQmT54c//vf/064/eWXX8774a0SBYbU3Llz891Hb+bMM888IRTHjh2L6dOnx8aNG08609zcPGQ7Vmukd2xpaYmenp4oiqLfGcgLL7wQERHveMc7anp8xgdRYFR417veFVu2bIkPf/jDp/yOt7W1NSJe+679wgsvzNv37dt3wjuATnaMiIjt27fH/Pnz3/Rxb/ZS0nDseCqzZ8+OH//4x/H000/HxRdfnLdv27Yt74e3ys8UGBWuu+66ePXVV+Nb3/rWCff19fXFgQMHIuK1n1lMnDgx1qxZE0VR5GNWr1494DE++MEPRltbW6xevTqf77jXP9fx35l442NqteNg35J6zTXXxMSJE+P+++/vt/f69evj/PPPjw996EMDPgcMxJkCo8IVV1wRnZ2dceedd8Y//vGPWLBgQUycODGeeeaZ6OrqinvvvTc+/elPR3Nzc9x6661x5513xuLFi6O9vT16e3vj97//fbztbW875TEmTJgQ69ati09+8pMxe/bsuOGGG6KlpSX++c9/xlNPPRWPPfZYRETM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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAADJJJREFUeJzt3EuI1fX/x/H3sZlyHOWX2HghZbSoFpVURhBFWmnWdFlFFBEmBEOUl0WERHQ1gogwTIQ2CSIELSIIuygoXRYRZAulIMSiEErBWlgiznz/i/BFk5pz+s80kz0eMIs55/s55z2Dnud8znzn22qapikAqKoJYz0AAOOHKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQocMaYO3duPfjgg/l8586d1Wq1aufOnWM205/9eUYYb0SBEbFp06ZqtVr5mDhxYl188cX16KOP1o8//jjW47Vl69at9cwzz4z1GCf1wgsv1F133VUzZsyoVqs1bufk36tjrAfgzPLcc8/VvHnz6siRI/XJJ5/Uxo0ba+vWrbV79+6aNGnSPzrLDTfcUL/99ludffbZba3bunVrbdiwYVy+4D755JM1c+bMuvLKK+uDDz4Y63E4A4kCI+q2226rq6++uqqqHnrooZo2bVq98sor9c4779R999130jWHDx+u7u7uEZ9lwoQJNXHixBF/3LG0b9++mjt3bh08eLB6enrGehzOQN4+YlTddNNNVfX7i1lV1YMPPliTJ0+uvXv3Vl9fX02ZMqXuv//+qqoaHBysdevW1aWXXloTJ06sGTNmVH9/fx06dGjIYzZNU2vXrq3Zs2fXpEmT6sYbb6w9e/ac8Nyn+p3CZ599Vn19fTV16tTq7u6u+fPn16uvvpr5NmzYUFU15O2w40Z6xqqqvXv31t69e4f1/Zw7d+6wjoO/y06BUXX8xW7atGm57dixY7V06dK6/vrr6+WXX87bSv39/bVp06Zavnx5rVy5svbt21evvfZa7dq1qz799NPq7Oysqqqnnnqq1q5dW319fdXX11dffPFF3XLLLXX06NHTzrNt27a64447atasWbVq1aqaOXNmffXVV/Xuu+/WqlWrqr+/v/bv31/btm2rzZs3n7B+NGa8+eabq6rq22+/be+bC6OhgRHwxhtvNFXVbN++vTlw4EDz/fffN2+++WYzbdq0pqurq/nhhx+apmmaZcuWNVXVrFmzZsj6jz/+uKmqZsuWLUNuf//994fc/tNPPzVnn312c/vttzeDg4M57oknnmiqqlm2bFlu27FjR1NVzY4dO5qmaZpjx4418+bNa3p7e5tDhw4NeZ4/PtYjjzzSnOy/xmjM2DRN09vb2/T29p7wfH/lwIEDTVU1Tz/9dFvr4HS8fcSIWrx4cfX09NScOXPq3nvvrcmTJ9fbb79d559//pDjHn744SGfv/XWW/W///2vlixZUgcPHszHggULavLkybVjx46qqtq+fXsdPXq0VqxYMeRtndWrV592tl27dtW+fftq9erVde655w6574+PdSqjNeO3335rl8C44e0jRtSGDRvq4osvro6OjpoxY0ZdcsklNWHC0J89Ojo6avbs2UNu++abb+qXX36p6dOnn/Rxf/rpp6qq+u6776qq6qKLLhpyf09PT02dOvUvZzv+VtZll102/C/oH54RxpooMKKuueaanH10Kuecc84JoRgcHKzp06fXli1bTrpmPJxp82+YEf6/RIFx4cILL6zt27fXddddV11dXac8rre3t6p+/6n9ggsuyO0HDhw44Qygkz1HVdXu3btr8eLFpzzuVG8l/RMzwljzOwXGhXvuuacGBgbq+eefP+G+Y8eO1c8//1xVv//OorOzs9avX19N0+SYdevWnfY5rrrqqpo3b16tW7cuj3fcHx/r+N9M/PmY0ZqxnVNSYbTZKTAuLFy4sPr7++vFF1+sL7/8sm655Zbq7Oysb775pt5666169dVX6+67766enp567LHH6sUXX6w77rij+vr6ateuXfXee+/Veeed95fPMWHChNq4cWPdeeeddcUVV9Ty5ctr1qxZ9fXXX9eePXvyF8ILFiyoqqqVK1fW0qVL66yzzqp777131GZs55TUzZs313fffVe//vprVVV99NFHtXbt2qqqeuCBB7JLgb9tjM9+4gxx/JTUzz///C+PW7ZsWdPd3X3K+19//fVmwYIFTVdXVzNlypTm8ssvbx5//PFm//79OWZgYKB59tlnm1mzZjVdXV3NokWLmt27dze9vb1/eUrqcZ988kmzZMmSZsqUKU13d3czf/78Zv369bn/2LFjzYoVK5qenp6m1WqdcHrqSM7YNO2dkrpw4cKmqk768eevE/6OVtP8YX8LwH+a3ykAEKIAQIgCACEKAIQoABCiAEAM+4/XhnMVSQDGr+H8BYKdAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAdIz1AHA6Z511VttrXnrppbbXDA4Otr1mzZo1ba8ZGBhoew38U+wUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAKLVNE0zrANbrdGeBU6qq6ur7TWHDx8ehUlONGnSpLbXHDlyZBQmgdMbzsu9nQIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIA0THWA8C/2fLly9tes3HjxlGYBEaGnQIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIA0WqaphnWga3WaM8CJ9XV1dX2msOHD4/CJCf68MMP215z6623jsIkcHrDebm3UwAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGA6BjrAeB0BgYG2l6zbdu2ttcsWbKk7TVwprFTACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBcJZVx7+jRo22v2bRpU9trXCUV7BQA+ANRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAMIF8Rj3Ojra/2d67bXXjsIkcOazUwAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIF8Rj3Ovs7Gx7zaOPPjoKk8CZz04BgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYDoGOsB4HTWr18/1iPAf4adAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAEC4IB7j3pw5c9pe02q1RmESOPPZKQAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEC+JxRmqaZqxHgH8lOwUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQAiFbTNM2wDmy1RnsWOKmFCxe2vWbHjh2jMMmJFi1a1Paajz76aOQHgWEYzsu9nQIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAuCAewH+EC+IB0BZRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQCiY7gHNk0zmnMAMA7YKQAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABD/B0+zix+4FwjEAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAD3ZJREFUeJzt3H+I1/UdwPHX1503zx+YuNMs43KRxVYyZkhQtCyrdRoJbSMoSsGw1i8bQyzY6IcQRKRRIvRPUgjbhGksrFCwbTXoBxpDSXB29gNheqFnP7au0/f+CF90+ev7+Xbn92aPB9wf3n1e3+/rzvP79PO9731qpZQSABARw5q9AABDhygAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkihwyjj77LNj3rx5+edXX301arVavPrqq03b6Zu+uSMMNaLAgFi1alXUarV8GzFiREydOjXuuuuu+Pe//93s9SpZv359PPjgg81e44RWr14dtVotRo8e3exVOIW0NHsBTi0PP/xwTJkyJf773//Ga6+9FitXroz169fH1q1bY+TIkSd1l8suuyz+85//RGtra6W59evXx4oVK4Z0GD799NNYvHhxjBo1qtmrcIpxpsCAuvbaa+Pmm2+OBQsWxKpVq2LRokXR1dUVL7zwwjFnPvvss0HZZdiwYTFixIgYNuzU+zZfunRpjBkzJubOndvsVTjFnHr/WhhSrrjiioiI6OrqioiIefPmxejRo2Pnzp3R2dkZY8aMiZtuuikiIg4dOhTLly+PH//4xzFixIiYOHFiLFy4MPbt29fvNkspsXTp0pg8eXKMHDkyZs6cGdu2bTvivo/1M4U33ngjOjs7Y9y4cTFq1KiYNm1aPPnkk7nfihUrIiL6PR122EDvGBGxc+fO2LlzZ71f0tixY0csW7YsnnjiiWhpcbLPwPIdxaA6/GA3fvz4fF9fX19cc801cemll8bjjz+eTystXLgwVq1aFfPnz4977rknurq64umnn44tW7bE66+/HsOHD4+IiN///vexdOnS6OzsjM7Ozti8eXNcffXV0dvbe8J9NmzYEHPmzIlJkybFvffeG6effnq8++678eKLL8a9994bCxcujN27d8eGDRvi+eefP2J+MHa88sorIyJi165ddX1NFy1aFDNnzozOzs7405/+VNcM1K3AAHj22WdLRJSNGzeWvXv3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+KLZK/Addd1111We2bRp0yBsQjM4UwAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJKrpA5RBw4caGju4MGDA7wJ3zW//OUvK8/85je/GYRNaAZnCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASLVSSqnrwFptsHdhALz33nuVZzZs2FB55q677qo88+WXX1ae4dtZsmTJSZk566yzKs988sknlWf4dup5uHemAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGA1NLsBRhYt912W+WZl19+ufLMsmXLKs9s37698gzfzu7duyvPjB07tvLMxRdfXHmmkQsxMvicKQCQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAINVKKaWuA2u1wd6FJtmzZ0/lmc2bN1ee+fnPf155hm9n/PjxlWc++OCDyjNz586tPOOCeCdfPQ/3zhQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBamr0A/596enqavQJ12L9/f+WZf/7zn5Vn7rvvvsozr7/+euWZiIjPP/+8oTnq40wBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIrpJKrFu3rvLM9OnTK8+0tDT27dbX19fQXFVnnHFG5Zlp06ZVnrn44osrz0REzJ49u/LM8OHDK8808jk14v77729o7ne/+90Ab8LXOVMAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEByQTziueeeqzyzYMGCyjONXshs//79lWeuvfbayjOXXHJJ5ZnW1tbKM3/7298qz0REPPjgg5VnPv7448ozc+fOrTyzePHiyjP/+Mc/Ks8w+JwpAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAg1Uoppa4Da7XB3oUmGTt2bOWZN954o/LMuHHjKs80av369ZVnGvmc3n777ZMyczJNnTq18sz27dsrz8yePbvyTETESy+91NAcEfU83DtTACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAamn2AjRfT09P5Znzzz9/EDZhKOju7m72CjSRMwUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkFqavQAwtHzyySeVZ955553KM2effXblGQafMwUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACQXxAP6+fLLLyvPdHd3V56ZMWNG5ZmIiJUrVzY0R32cKQCQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAILkgHtBPa2tr5ZmJEydWnlmzZk3lGQafMwUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKAKRaKaXUdWCtNti7ADCI6nm4d6YAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIAqaXeA0spg7kHAEOAMwUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUA0v8Aw9d5FT37NOsAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xZEnPNT1bRr7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}