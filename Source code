import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# Load MNIST dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalize the data
x_train, x_test = x_train / 255.0, x_test / 255.0

# Build the model
model = models.Sequential([
    layers.Flatten(input_shape=(28, 28)),
        layers.Dense(128, activation='relu'),
            layers.Dense(64, activation='relu'),
                layers.Dense(10, activation='softmax')
                ])

                # Compile the model
                model.compile(optimizer='adam',
                              loss='sparse_categorical_crossentropy',
                                            metrics=['accuracy'])

                                            # Train the model
                                            history = model.fit(x_train, y_train, epochs=5, validation_split=0.2)

                                            # Evaluate the model
                                            test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
                                            print('\nTest accuracy:', test_acc)

                                            # Predict on test set
                                            predictions = model.predict(x_test)

                                            # Show sample images with predictions
                                            for i in range(5):
                                                plt.imshow(x_test[i], cmap='gray')
                                                    plt.title(f"Prediction: {tf.argmax(predictions[i]).numpy()}")
                                                        plt.show()
